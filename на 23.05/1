#include <iostream>
#include <cmath>
#include <iomanip>
#include <windows.h>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <cstring>
#include <fstream>
#include <stack>
#include <list>
#include <set>
using namespace std;




int main() {
    list<int> nums;
    int n, num; cin >> n;
    for (int i = 0; i < n; i++)
    {
        cin >> num;
        nums.push_back(num);
    }
    auto min_it = nums.begin();
    for (auto it = nums.begin(); it != nums.end(); ++it) 
    {
        if (*it < *min_it) {
            min_it = it;
        }
    }
    nums.insert(min_it, 0);
    nums.insert(next(min_it), 0);
    for (auto n : nums) 
    {
        cout << n << " ";
    }
    cout << endl;
    /*
    В первой задаче используется список STL, т.к. вставка элемента происходит за O(1)
    Иницилизация, поиск минимального и вывод происходит за O(n). Значит общее время выполнения программы O(n)
    */
    vector<int>nums2;
    int n, num; cin >> n;
    int max_negative = INT_MIN;
    bool has_negative = false;
    for (int i = 0; i < n; i++)
    {
        cin >> num;
        nums2.push_back(num);
    }
    for (int i = 0; i < n; i++) 
    {
        if (nums2[i] < 0) {
            has_negative = true;
            if (nums2[i] > max_negative) 
            {
                max_negative = nums2[i];
            }
        }
    }
    if (n % 2 == 0 || !has_negative)
    {
        cout << "ERROR";
    }
    else
    {
        nums2[n / 2] = max_negative;
    }
    for (int i = 0; i < n; i++)
    {
        cout << nums2[i] << ' ';
    }
    cout << endl;
    /*
    Во второй задаче используется вектор т.к. обращение к элементу и замена происходит за O(1)
    Иницилизация, поиск максимального отрицательного, вывод происходят за O(n). Значит общее выполнение программы O(n)
    */
}
